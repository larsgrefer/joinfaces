import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE"
        classpath "io.freefair.gradle:lombok-plugin:2.7.5"
        classpath "io.freefair.gradle:maven-plugin:2.7.5"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.5"
        classpath "com.netflix.nebula:gradle-lint-plugin:10.1.3"
        classpath "de.aaschmid:gradle-cpd-plugin:1.1"
    }
}

allprojects {
    group = 'org.joinfaces'
    version = '3.3.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'javax.faces:javax.faces-api:2.3'

            dependency('org.glassfish:javax.faces:2.3.7')

            dependencySet('org.apache.myfaces.core:2.3.2') {
                entry "myfaces-api"
                entry("myfaces-impl") {
                    exclude "commons-logging:commons-logging"
                }
            }

            dependency('javax.enterprise:cdi-api:2.0') {
                exclude "javax.el:javax.el-api"
            }

            dependency "org.apache.tomcat:tomcat-jasper:${importedProperties['tomcat.version']}"
            dependency 'org.jboss.spec.javax.servlet.jsp:jboss-jsp-api_2.3_spec:1.0.3.Final'

            dependency 'io.github.classgraph:classgraph:4.4.12'

            dependency 'org.primefaces:primefaces:6.2'
            dependencySet("org.primefaces.extensions:6.2.9") {
                entry "primefaces-extensions"
                entry "resources-ckeditor"
            }

            dependency 'net.bootsfaces:bootsfaces:1.3.0'
            dependency('de.beyondjava:angularFaces-core:2.1.12') {
                exclude "commons-logging:commons-logging"
            }
            dependency 'org.butterfaces:components:3.0.6'

            dependencySet('org.richfaces:4.5.17.Final') {
                entry "richfaces"
                entry "richfaces-a4j"
            }

            dependencySet('org.icefaces:4.3.0') {
                entry 'icefaces'
                entry 'icefaces-ace'
            }

            dependency "commons-fileupload:commons-fileupload:1.3.3"

            dependency('org.jboss.weld.servlet:weld-servlet-core:3.0.5.Final') {
                exclude 'org.jboss.spec.javax.el:jboss-el-api_3.0_spec'
                exclude 'org.jboss.logging:jboss-logging'
                exclude 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec'
            }

            dependencySet("org.ocpsoft.rewrite:3.4.2.Final") {
                entry "rewrite-servlet"
                entry "rewrite-config-prettyfaces"
                entry "rewrite-integration-spring"
                entry "rewrite-integration-faces"
                entry "rewrite-integration-cdi"
            }

            dependencySet('org.glassfish.jaxb:2.3.0') {
                entry "jaxb-runtime"
                entry "jaxb-core"
            }

            dependencySet('com.github.adminfaces:1.0.0-RC19') {
                entry "admin-template"
                entry "admin-theme"
            }

            dependency 'javax.ejb:javax.ejb-api:3.2.2'

        }
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        rules = ['transitive-duplicate-dependency-class']
        criticalRules = ['duplicate-dependency-class', 'dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        javadoc.failOnError = false

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        tasks.withType(JDepend) { jDepend ->
            jDepend.group = "verification"
            tasks.create("${jDepend.name}Cycles") {
                dependsOn jDepend
                check.dependsOn it
                group = "verification"
                inputs.file { jDepend.reports.xml.destination }
                doLast {
                    def reportFile = jDepend.reports.xml.destination
                    def numberOfCycles = new XmlSlurper().parse(reportFile).Cycles.Package.size()
                    assert numberOfCycles == 0, "We have detected $numberOfCyclesMain cycles. Checkout report file: $fileMain."
                }
            }
        }
    }

    plugins.withId("checkstyle") {
        checkstyle {
            toolVersion = '8.12'
        }
    }

    plugins.withId("pmd") {
        pmd {
            toolVersion = '6.4.0'
            ruleSetFiles = files("config/pmd/pmd-ruleset.xml")
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        jacocoTestReport.reports.xml.enabled true
        jacoco.toolVersion = "0.8.2"
    }

    plugins.withId("maven-publish") {
        apply plugin: "signing"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = 'http://joinfaces.org'
                    name = provider { project.description }
                    inceptionYear = '2016'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    organization {
                        name = 'JoinFaces'
                        url = 'http://joinfaces.org'
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'Travis CI'
                        url = 'https://travis-ci.org/joinfaces/joinfaces/'
                    }
                    issueManagement {
                        system = 'Github'
                        url = 'https://github.com/joinfaces/joinfaces/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/joinfaces/joinfaces.git'
                        developerConnection = 'scm:git:git@github.com:joinfaces/joinfaces.git'
                        url = 'https://github.com/joinfaces/joinfaces/'
                    }
                }
            }

            repositories {
                maven {
                    def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                    def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = System.getenv('OSSRH_USER')
                        password = System.getenv('OSSRH_PASS')
                    }
                }
            }
        }
    }
}

apply plugin: "de.aaschmid.cpd"

cpdCheck {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"
apply plugin: "io.freefair.aggregate-javadoc-jar"

aggregateJavadoc.failOnError = false

publishing {
    publications {
        bom(MavenPublication) {
            artifactId = 'joinfaces-dependencies'

            pom {
                name = 'JoinFaces Dependencies'
            }

            pom.withXml {
                rootProject.subprojects { p ->
                    if (p.pluginManager.hasPlugin('maven-publish')) {
                        def depNode = asNode().dependencyManagement.first().get('dependencies').first().appendNode('dependency')
                        depNode.appendNode('groupId', p.group)
                        depNode.appendNode('artifactId', p.name)
                        depNode.appendNode('version', p.version)
                    }
                }
            }
        }
        javadoc(MavenPublication) {
            artifactId = 'joinfaces'

            pom {
                name = "JoinFaces"
            }

            artifact aggregateJavadocJar
        }
    }
}


